import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class MainListDifference {
    public static void main(String[] args) {
        List<String> lista1 = new ArrayList();
        lista1.add("00067750000180");
        lista1.add("00118860000124");
        lista1.add("00298737000132");
        lista1.add("00330338000101");
        lista1.add("00641761000122");
        lista1.add("01016321000147");
        lista1.add("01110428000150");
        lista1.add("01215172000145");
        lista1.add("01226785000188");
        lista1.add("01590042000192");
        lista1.add("01786465000182");
        lista1.add("01899150000141");
        lista1.add("01925649000186");
        lista1.add("01939170000107");
        lista1.add("02015189000111");
        lista1.add("02162964000161");
        lista1.add("02167542000189");
        lista1.add("02615048000130");
        lista1.add("02763234000116");
        lista1.add("02772168000140");
        lista1.add("03010559000190");
        lista1.add("03157705000105");
        lista1.add("03246347000107");
        lista1.add("03461285000156");
        lista1.add("03555314000149");
        lista1.add("03795295000128");
        lista1.add("03855694000137");
        lista1.add("03914236000121");
        lista1.add("04436076000115");
        lista1.add("04551477000116");
        lista1.add("04551477000205");
        lista1.add("04551477000388");
        lista1.add("04632746000179");
        lista1.add("04635192000163");
        lista1.add("04699734000161");
        lista1.add("04746029000178");
        lista1.add("04754233000130");
        lista1.add("04796015000169");
        lista1.add("04809887000114");
        lista1.add("05284258000180");
        lista1.add("05696453000118");
        lista1.add("05730903000141");
        lista1.add("05730903000303");
        lista1.add("05796755000168");
        lista1.add("05857880000130");
        lista1.add("05900235000153");
        lista1.add("05907822002541");
        lista1.add("06955648000106");
        lista1.add("07182717000140");
        lista1.add("07246494000138");
        lista1.add("07248318000135");
        lista1.add("07543171000106");
        lista1.add("07580542000120");
        lista1.add("07626467000190");
        lista1.add("07660130000108");
        lista1.add("07864856000154");
        lista1.add("07906908000108");
        lista1.add("08750716000118");
        lista1.add("08985357000188");
        lista1.add("09205713000166");
        lista1.add("09275194000102");
        lista1.add("09389852000197");
        lista1.add("10611064000182");
        lista1.add("10863022000139");
        lista1.add("11014940000156");
        lista1.add("11128772000120");
        lista1.add("11281129000131");
        lista1.add("11377428000174");
        lista1.add("11963931000101");
        lista1.add("11963931000292");
        lista1.add("12002552000118");
        lista1.add("12702707000129");
        lista1.add("12877696000118");
        lista1.add("12928630000100");
        lista1.add("13315486000107");
        lista1.add("13369817000183");
        lista1.add("13672382000141");
        lista1.add("13847381000190");
        lista1.add("14006175000110");
        lista1.add("14242030000119");
        lista1.add("14505608000182");
        lista1.add("14719755000155");
        lista1.add("14959998000160");
        lista1.add("15740028000132");
        lista1.add("15742278000101");
        lista1.add("17009761000107");
        lista1.add("18157881000114");
        lista1.add("19238541000180");
        lista1.add("19540628000108");
        lista1.add("19700192000177");
        lista1.add("20495149000872");
        lista1.add("20973964000123");
        lista1.add("21038716000158");
        lista1.add("21265077000163");
        lista1.add("21578785000154");
        lista1.add("22258301000152");
        lista1.add("22506756000140");
        lista1.add("22787055000126");
        lista1.add("23049249000197");
        lista1.add("23496359000105");
        lista1.add("24658296000109");
        lista1.add("25032853000136");
        lista1.add("25489287000196");
        lista1.add("26610780000185");
        lista1.add("27034164000196");
        lista1.add("27126044000119");
        lista1.add("27282982000108");
        lista1.add("27469670000108");
        lista1.add("27695006000187");
        lista1.add("28935153000140");
        lista1.add("28935153000220");
        lista1.add("29814050000194");
        lista1.add("30065650000186");
        lista1.add("30291868000159");
        lista1.add("30733130000102");
        lista1.add("30800890000187");
        lista1.add("31062334000113");
        lista1.add("32179707000101");
        lista1.add("33099859000159");
        lista1.add("35257918000103");
        lista1.add("35273451000187");
        lista1.add("35775404000131");
        lista1.add("38251020000108");
        lista1.add("38363831000109");
        lista1.add("39006051000166");
        lista1.add("41057571000140");
        lista1.add("41090635000104");
        lista1.add("41090687000180");
        lista1.add("41712282000137");
        lista1.add("42202333000143");
        lista1.add("42321398000108");
        lista1.add("43376169000153");
        lista1.add("43546156000185");
        lista1.add("44324201000110");
        lista1.add("44615418000189");
        lista1.add("45225964000176");
        lista1.add("46404075000139");
        lista1.add("47447545000104");
        lista1.add("48032098000195");
        lista1.add("49155603000151");
        lista1.add("49389959000150");
        lista1.add("49693751000120");
        lista1.add("49693751000200");
        lista1.add("50195502000193");
        lista1.add("51096899000129");
        lista1.add("52212878000194");
        lista1.add("52269644000183");
        lista1.add("56145469000173");
        lista1.add("58812348000163");
        lista1.add("59720177000105");
        lista1.add("60835634000196");
        lista1.add("61794038000178");
        lista1.add("64491921000187");
        lista1.add("65131195000154");
        lista1.add("67949974000197");
        lista1.add("71050249000150");
        lista1.add("80200819000131");
        lista1.add("82580697000181");
        lista1.add("87633046000126");
        lista1.add("92076108000186");

        List<String> lista2 = new ArrayList();
        lista2.add("41090635000104");
        lista2.add("35257918000103");
        lista2.add("03157705000105");
        lista2.add("49693751000200");
        lista2.add("11014940000156");
        lista2.add("02763234000116");
        lista2.add("21578785000154");
        lista2.add("03795295000128");
        lista2.add("02015189000111");
        lista2.add("30733130000102");
        lista2.add("32179707000101");
        lista2.add("64491921000187");
        lista2.add("41057571000140");
        lista2.add("20973964000123");
        lista2.add("04754233000130");
        lista2.add("44615418000189");
        lista2.add("30291868000159");
        lista2.add("18157881000114");
        lista2.add("05730903000303");
        lista2.add("03010559000190");
        lista2.add("04551477000205");
        lista2.add("28935153000220");
        lista2.add("25489287000196");
        lista2.add("35273451000187");
        lista2.add("56145469000173");
        lista2.add("10611064000182");
        lista2.add("04632746000179");
        lista2.add("02772168000140");
        lista2.add("27695006000187");
        lista2.add("27469670000108");
        lista2.add("00298737000132");
        lista2.add("07626467000190");
        lista2.add("07182717000140");
        lista2.add("01899150000141");
        lista2.add("07246494000138");
        lista2.add("00118860000124");
        lista2.add("49389959000150");
        lista2.add("22506756000140");
        lista2.add("19540628000108");
        lista2.add("42202333000143");
        lista2.add("09389852000197");
        lista2.add("24658296000109");
        lista2.add("03914236000121");
        lista2.add("05696453000118");
        lista2.add("28935153000140");
        lista2.add("67949974000197");
        lista2.add("46404075000139");
        lista2.add("01939170000107");
        lista2.add("07543171000106");
        lista2.add("17009761000107");
        lista2.add("59720177000105");
        lista2.add("22258301000152");
        lista2.add("42321398000108");
        lista2.add("14242030000119");
        lista2.add("03555314000149");
        lista2.add("15742278000101");
        lista2.add("07660130000108");
        lista2.add("22787055000126");
        lista2.add("50195502000193");
        lista2.add("23496359000105");
        lista2.add("05730903000141");
        lista2.add("04551477000116");
        lista2.add("14505608000182");
        lista2.add("14006175000110");
        lista2.add("52212878000194");
        lista2.add("07248318000135");
        lista2.add("07906908000108");
        lista2.add("01110428000150");
        lista2.add("13672382000141");
        lista2.add("02615048000130");
        lista2.add("11963931000101");
        lista2.add("71050249000150");
        lista2.add("00067750000180");
        lista2.add("35775404000131");
        lista2.add("11963931000292");
        lista2.add("02167542000189");
        lista2.add("60835634000196");
        lista2.add("13315486000107");
        lista2.add("20495149000872");
        lista2.add("04635192000163");
        lista2.add("09275194000102");
        lista2.add("41090687000180");
        lista2.add("51096899000129");
        lista2.add("01590042000192");
        lista2.add("65131195000154");
        lista2.add("05857880000130");
        lista2.add("12002552000118");
        lista2.add("01786465000182");
        lista2.add("14959998000160");
        lista2.add("01215172000145");
        lista2.add("05907822002541");
        lista2.add("43376169000153");
        lista2.add("27034164000196");
        lista2.add("45225964000176");
        lista2.add("19700192000177");
        lista2.add("00641761000122");
        lista2.add("04551477000388");
        lista2.add("13847381000190");
        lista2.add("48032098000195");
        lista2.add("21038716000158");
        lista2.add("11377428000174");
        lista2.add("61794038000178");
        lista2.add("12928630000100");
        lista2.add("04796015000169");
        lista2.add("02162964000161");
        lista2.add("04746029000178");
        lista2.add("13369817000183");
        lista2.add("44324201000110");
        lista2.add("01925649000186");
        lista2.add("15740028000132");
        lista2.add("11128772000120");
        lista2.add("41712282000137");
        lista2.add("27282982000108");
        lista2.add("82580697000181");
        lista2.add("10863022000139");
        lista2.add("05284258000180");
        lista2.add("11281129000131");
        lista2.add("09205713000166");
        lista2.add("04809887000114");
        lista2.add("07580542000120");
        lista2.add("01226785000188");
        lista2.add("01016321000147");
        lista2.add("21265077000163");
        lista2.add("05900235000153");
        lista2.add("30800890000187");
        lista2.add("03461285000156");
        lista2.add("05796755000168");
        lista2.add("23049249000197");
        lista2.add("47447545000104");
        lista2.add("38251020000108");
        lista2.add("29814050000194");
        lista2.add("08985357000188");
        lista2.add("12702707000129");
        lista2.add("14719755000155");
        lista2.add("58812348000163");
        lista2.add("27126044000119");
        lista2.add("92076108000186");
        lista2.add("08750716000118");
        lista2.add("25032853000136");
        lista2.add("12877696000118");
        lista2.add("19238541000180");
        lista2.add("04436076000115");
        lista2.add("30065650000186");
        lista2.add("49693751000120");
        lista2.add("04699734000161");
        lista2.add("87633046000126");
        lista2.add("31062334000113");
        lista2.add("07864856000154");

        List<String> stringsDiferentes = encontrarDiferencas(lista1, lista2);
        System.out.println("Strings que estão em apenas uma das listas: " + stringsDiferentes);
    }

    public static List<String> encontrarDiferencas(List<String> lista1, List<String> lista2) {
        // Usando conjuntos (Sets) para determinar as diferenças
        Set<String> conjunto1 = new HashSet<>(lista1);
        Set<String> conjunto2 = new HashSet<>(lista2);

        // Cria um conjunto para armazenar as strings que estão em apenas uma das listas
        Set<String> diferenca = new HashSet<>();

        // Adiciona todas as strings da primeira lista que não estão na segunda lista ao conjunto de diferença
        for (String elemento : lista1) {
            if (!conjunto2.contains(elemento)) {
                diferenca.add(elemento);
            }
        }

        // Adiciona todas as strings da segunda lista que não estão na primeira lista ao conjunto de diferença
        for (String elemento : lista2) {
            if (!conjunto1.contains(elemento)) {
                diferenca.add(elemento);
            }
        }

        // Converte o conjunto de diferença para uma lista
        List<String> listaDiferencas = new ArrayList<>(diferenca);

        return listaDiferencas;
    }
}